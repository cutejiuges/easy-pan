/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.easy_pan.account;

import jakarta.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-02")
public class UserLoginData implements org.apache.thrift.TBase<UserLoginData, UserLoginData._Fields>, java.io.Serializable, Cloneable, Comparable<UserLoginData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserLoginData");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userID", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSpace", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField USED_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("usedSpace", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REFRESH_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("refreshToken", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserLoginDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserLoginDataTupleSchemeFactory();

  public long userID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String nickName; // required
  public long totalSpace; // required
  public long usedSpace; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String refreshToken; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userID"),
    NICK_NAME((short)2, "nickName"),
    TOTAL_SPACE((short)3, "totalSpace"),
    USED_SPACE((short)4, "usedSpace"),
    ACCESS_TOKEN((short)5, "accessToken"),
    REFRESH_TOKEN((short)6, "refreshToken");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // NICK_NAME
          return NICK_NAME;
        case 3: // TOTAL_SPACE
          return TOTAL_SPACE;
        case 4: // USED_SPACE
          return USED_SPACE;
        case 5: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        case 6: // REFRESH_TOKEN
          return REFRESH_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __TOTALSPACE_ISSET_ID = 1;
  private static final int __USEDSPACE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_SPACE, new org.apache.thrift.meta_data.FieldMetaData("totalSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USED_SPACE, new org.apache.thrift.meta_data.FieldMetaData("usedSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFRESH_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("refreshToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserLoginData.class, metaDataMap);
  }

  public UserLoginData() {
  }

  public UserLoginData(
    long userID,
    java.lang.String nickName,
    long totalSpace,
    long usedSpace,
    java.lang.String accessToken,
    java.lang.String refreshToken)
  {
    this();
    this.userID = userID;
    setUserIDIsSet(true);
    this.nickName = nickName;
    this.totalSpace = totalSpace;
    setTotalSpaceIsSet(true);
    this.usedSpace = usedSpace;
    setUsedSpaceIsSet(true);
    this.accessToken = accessToken;
    this.refreshToken = refreshToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserLoginData(UserLoginData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userID = other.userID;
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    this.totalSpace = other.totalSpace;
    this.usedSpace = other.usedSpace;
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
    if (other.isSetRefreshToken()) {
      this.refreshToken = other.refreshToken;
    }
  }

  @Override
  public UserLoginData deepCopy() {
    return new UserLoginData(this);
  }

  @Override
  public void clear() {
    setUserIDIsSet(false);
    this.userID = 0;
    this.nickName = null;
    setTotalSpaceIsSet(false);
    this.totalSpace = 0;
    setUsedSpaceIsSet(false);
    this.usedSpace = 0;
    this.accessToken = null;
    this.refreshToken = null;
  }

  public long getUserID() {
    return this.userID;
  }

  public UserLoginData setUserID(long userID) {
    this.userID = userID;
    setUserIDIsSet(true);
    return this;
  }

  public void unsetUserID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userID is set (has been assigned a value) and false otherwise */
  public boolean isSetUserID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNickName() {
    return this.nickName;
  }

  public UserLoginData setNickName(@org.apache.thrift.annotation.Nullable java.lang.String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public long getTotalSpace() {
    return this.totalSpace;
  }

  public UserLoginData setTotalSpace(long totalSpace) {
    this.totalSpace = totalSpace;
    setTotalSpaceIsSet(true);
    return this;
  }

  public void unsetTotalSpace() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALSPACE_ISSET_ID);
  }

  /** Returns true if field totalSpace is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSpace() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALSPACE_ISSET_ID);
  }

  public void setTotalSpaceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALSPACE_ISSET_ID, value);
  }

  public long getUsedSpace() {
    return this.usedSpace;
  }

  public UserLoginData setUsedSpace(long usedSpace) {
    this.usedSpace = usedSpace;
    setUsedSpaceIsSet(true);
    return this;
  }

  public void unsetUsedSpace() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USEDSPACE_ISSET_ID);
  }

  /** Returns true if field usedSpace is set (has been assigned a value) and false otherwise */
  public boolean isSetUsedSpace() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USEDSPACE_ISSET_ID);
  }

  public void setUsedSpaceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USEDSPACE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAccessToken() {
    return this.accessToken;
  }

  public UserLoginData setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRefreshToken() {
    return this.refreshToken;
  }

  public UserLoginData setRefreshToken(@org.apache.thrift.annotation.Nullable java.lang.String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  public void unsetRefreshToken() {
    this.refreshToken = null;
  }

  /** Returns true if field refreshToken is set (has been assigned a value) and false otherwise */
  public boolean isSetRefreshToken() {
    return this.refreshToken != null;
  }

  public void setRefreshTokenIsSet(boolean value) {
    if (!value) {
      this.refreshToken = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserID();
      } else {
        setUserID((java.lang.Long)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((java.lang.String)value);
      }
      break;

    case TOTAL_SPACE:
      if (value == null) {
        unsetTotalSpace();
      } else {
        setTotalSpace((java.lang.Long)value);
      }
      break;

    case USED_SPACE:
      if (value == null) {
        unsetUsedSpace();
      } else {
        setUsedSpace((java.lang.Long)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((java.lang.String)value);
      }
      break;

    case REFRESH_TOKEN:
      if (value == null) {
        unsetRefreshToken();
      } else {
        setRefreshToken((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserID();

    case NICK_NAME:
      return getNickName();

    case TOTAL_SPACE:
      return getTotalSpace();

    case USED_SPACE:
      return getUsedSpace();

    case ACCESS_TOKEN:
      return getAccessToken();

    case REFRESH_TOKEN:
      return getRefreshToken();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserID();
    case NICK_NAME:
      return isSetNickName();
    case TOTAL_SPACE:
      return isSetTotalSpace();
    case USED_SPACE:
      return isSetUsedSpace();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    case REFRESH_TOKEN:
      return isSetRefreshToken();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof UserLoginData)
      return this.equals((UserLoginData)that);
    return false;
  }

  public boolean equals(UserLoginData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userID = true;
    boolean that_present_userID = true;
    if (this_present_userID || that_present_userID) {
      if (!(this_present_userID && that_present_userID))
        return false;
      if (this.userID != that.userID)
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_totalSpace = true;
    boolean that_present_totalSpace = true;
    if (this_present_totalSpace || that_present_totalSpace) {
      if (!(this_present_totalSpace && that_present_totalSpace))
        return false;
      if (this.totalSpace != that.totalSpace)
        return false;
    }

    boolean this_present_usedSpace = true;
    boolean that_present_usedSpace = true;
    if (this_present_usedSpace || that_present_usedSpace) {
      if (!(this_present_usedSpace && that_present_usedSpace))
        return false;
      if (this.usedSpace != that.usedSpace)
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    boolean this_present_refreshToken = true && this.isSetRefreshToken();
    boolean that_present_refreshToken = true && that.isSetRefreshToken();
    if (this_present_refreshToken || that_present_refreshToken) {
      if (!(this_present_refreshToken && that_present_refreshToken))
        return false;
      if (!this.refreshToken.equals(that.refreshToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(userID);

    hashCode = hashCode * 8191 + ((isSetNickName()) ? 131071 : 524287);
    if (isSetNickName())
      hashCode = hashCode * 8191 + nickName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalSpace);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(usedSpace);

    hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
    if (isSetAccessToken())
      hashCode = hashCode * 8191 + accessToken.hashCode();

    hashCode = hashCode * 8191 + ((isSetRefreshToken()) ? 131071 : 524287);
    if (isSetRefreshToken())
      hashCode = hashCode * 8191 + refreshToken.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserLoginData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUserID(), other.isSetUserID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userID, other.userID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNickName(), other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTotalSpace(), other.isSetTotalSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSpace, other.totalSpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsedSpace(), other.isSetUsedSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsedSpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usedSpace, other.usedSpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAccessToken(), other.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRefreshToken(), other.isSetRefreshToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefreshToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refreshToken, other.refreshToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserLoginData(");
    boolean first = true;

    sb.append("userID:");
    sb.append(this.userID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSpace:");
    sb.append(this.totalSpace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usedSpace:");
    sb.append(this.usedSpace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessToken:");
    if (this.accessToken == null) {
      sb.append("null");
    } else {
      sb.append(this.accessToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refreshToken:");
    if (this.refreshToken == null) {
      sb.append("null");
    } else {
      sb.append(this.refreshToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserLoginDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UserLoginDataStandardScheme getScheme() {
      return new UserLoginDataStandardScheme();
    }
  }

  private static class UserLoginDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserLoginData> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, UserLoginData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userID = iprot.readI64();
              struct.setUserIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalSpace = iprot.readI64();
              struct.setTotalSpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USED_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.usedSpace = iprot.readI64();
              struct.setUsedSpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REFRESH_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refreshToken = iprot.readString();
              struct.setRefreshTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, UserLoginData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userID);
      oprot.writeFieldEnd();
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_SPACE_FIELD_DESC);
      oprot.writeI64(struct.totalSpace);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USED_SPACE_FIELD_DESC);
      oprot.writeI64(struct.usedSpace);
      oprot.writeFieldEnd();
      if (struct.accessToken != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(struct.accessToken);
        oprot.writeFieldEnd();
      }
      if (struct.refreshToken != null) {
        oprot.writeFieldBegin(REFRESH_TOKEN_FIELD_DESC);
        oprot.writeString(struct.refreshToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserLoginDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UserLoginDataTupleScheme getScheme() {
      return new UserLoginDataTupleScheme();
    }
  }

  private static class UserLoginDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserLoginData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserLoginData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserID()) {
        optionals.set(0);
      }
      if (struct.isSetNickName()) {
        optionals.set(1);
      }
      if (struct.isSetTotalSpace()) {
        optionals.set(2);
      }
      if (struct.isSetUsedSpace()) {
        optionals.set(3);
      }
      if (struct.isSetAccessToken()) {
        optionals.set(4);
      }
      if (struct.isSetRefreshToken()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUserID()) {
        oprot.writeI64(struct.userID);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetTotalSpace()) {
        oprot.writeI64(struct.totalSpace);
      }
      if (struct.isSetUsedSpace()) {
        oprot.writeI64(struct.usedSpace);
      }
      if (struct.isSetAccessToken()) {
        oprot.writeString(struct.accessToken);
      }
      if (struct.isSetRefreshToken()) {
        oprot.writeString(struct.refreshToken);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserLoginData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.userID = iprot.readI64();
        struct.setUserIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalSpace = iprot.readI64();
        struct.setTotalSpaceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.usedSpace = iprot.readI64();
        struct.setUsedSpaceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
      if (incoming.get(5)) {
        struct.refreshToken = iprot.readString();
        struct.setRefreshTokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.easy_pan.account;

import jakarta.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-02")
public class ImgVerifyCodeRequest implements org.apache.thrift.TBase<ImgVerifyCodeRequest, ImgVerifyCodeRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ImgVerifyCodeRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImgVerifyCodeRequest");

  private static final org.apache.thrift.protocol.TField VERIFY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("verifyType", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImgVerifyCodeRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImgVerifyCodeRequestTupleSchemeFactory();

  public byte verifyType; // required
  public @org.apache.thrift.annotation.Nullable com.cutejiuge.base.Base base; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERIFY_TYPE((short)1, "verifyType"),
    BASE((short)255, "base");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERIFY_TYPE
          return VERIFY_TYPE;
        case 255: // BASE
          return BASE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERIFYTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BASE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERIFY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("verifyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.cutejiuge.base.Base.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImgVerifyCodeRequest.class, metaDataMap);
  }

  public ImgVerifyCodeRequest() {
  }

  public ImgVerifyCodeRequest(
    byte verifyType)
  {
    this();
    this.verifyType = verifyType;
    setVerifyTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImgVerifyCodeRequest(ImgVerifyCodeRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.verifyType = other.verifyType;
    if (other.isSetBase()) {
      this.base = new com.cutejiuge.base.Base(other.base);
    }
  }

  @Override
  public ImgVerifyCodeRequest deepCopy() {
    return new ImgVerifyCodeRequest(this);
  }

  @Override
  public void clear() {
    setVerifyTypeIsSet(false);
    this.verifyType = 0;
    this.base = null;
  }

  public byte getVerifyType() {
    return this.verifyType;
  }

  public ImgVerifyCodeRequest setVerifyType(byte verifyType) {
    this.verifyType = verifyType;
    setVerifyTypeIsSet(true);
    return this;
  }

  public void unsetVerifyType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERIFYTYPE_ISSET_ID);
  }

  /** Returns true if field verifyType is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifyType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERIFYTYPE_ISSET_ID);
  }

  public void setVerifyTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERIFYTYPE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.cutejiuge.base.Base getBase() {
    return this.base;
  }

  public ImgVerifyCodeRequest setBase(@org.apache.thrift.annotation.Nullable com.cutejiuge.base.Base base) {
    this.base = base;
    return this;
  }

  public void unsetBase() {
    this.base = null;
  }

  /** Returns true if field base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.base = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case VERIFY_TYPE:
      if (value == null) {
        unsetVerifyType();
      } else {
        setVerifyType((java.lang.Byte)value);
      }
      break;

    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((com.cutejiuge.base.Base)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VERIFY_TYPE:
      return getVerifyType();

    case BASE:
      return getBase();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VERIFY_TYPE:
      return isSetVerifyType();
    case BASE:
      return isSetBase();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ImgVerifyCodeRequest)
      return this.equals((ImgVerifyCodeRequest)that);
    return false;
  }

  public boolean equals(ImgVerifyCodeRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_verifyType = true;
    boolean that_present_verifyType = true;
    if (this_present_verifyType || that_present_verifyType) {
      if (!(this_present_verifyType && that_present_verifyType))
        return false;
      if (this.verifyType != that.verifyType)
        return false;
    }

    boolean this_present_base = true && this.isSetBase();
    boolean that_present_base = true && that.isSetBase();
    if (this_present_base || that_present_base) {
      if (!(this_present_base && that_present_base))
        return false;
      if (!this.base.equals(that.base))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (verifyType);

    hashCode = hashCode * 8191 + ((isSetBase()) ? 131071 : 524287);
    if (isSetBase())
      hashCode = hashCode * 8191 + base.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ImgVerifyCodeRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetVerifyType(), other.isSetVerifyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyType, other.verifyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBase(), other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImgVerifyCodeRequest(");
    boolean first = true;

    sb.append("verifyType:");
    sb.append(this.verifyType);
    first = false;
    if (isSetBase()) {
      if (!first) sb.append(", ");
      sb.append("base:");
      if (this.base == null) {
        sb.append("null");
      } else {
        sb.append(this.base);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (base != null) {
      base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImgVerifyCodeRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ImgVerifyCodeRequestStandardScheme getScheme() {
      return new ImgVerifyCodeRequestStandardScheme();
    }
  }

  private static class ImgVerifyCodeRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImgVerifyCodeRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ImgVerifyCodeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERIFY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.verifyType = iprot.readByte();
              struct.setVerifyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.base = new com.cutejiuge.base.Base();
              struct.base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ImgVerifyCodeRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERIFY_TYPE_FIELD_DESC);
      oprot.writeByte(struct.verifyType);
      oprot.writeFieldEnd();
      if (struct.base != null) {
        if (struct.isSetBase()) {
          oprot.writeFieldBegin(BASE_FIELD_DESC);
          struct.base.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImgVerifyCodeRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ImgVerifyCodeRequestTupleScheme getScheme() {
      return new ImgVerifyCodeRequestTupleScheme();
    }
  }

  private static class ImgVerifyCodeRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImgVerifyCodeRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImgVerifyCodeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVerifyType()) {
        optionals.set(0);
      }
      if (struct.isSetBase()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVerifyType()) {
        oprot.writeByte(struct.verifyType);
      }
      if (struct.isSetBase()) {
        struct.base.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImgVerifyCodeRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.verifyType = iprot.readByte();
        struct.setVerifyTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.base = new com.cutejiuge.base.Base();
        struct.base.read(iprot);
        struct.setBaseIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


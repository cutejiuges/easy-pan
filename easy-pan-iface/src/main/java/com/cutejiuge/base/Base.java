/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cutejiuge.base;

import jakarta.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-05-12")
public class Base implements org.apache.thrift.TBase<Base, Base._Fields>, java.io.Serializable, Cloneable, Comparable<Base> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Base");

  private static final org.apache.thrift.protocol.TField LOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("logID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CALLER_FIELD_DESC = new org.apache.thrift.protocol.TField("caller", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("addr", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("client", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TRAFFIC_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("trafficEnv", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BaseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BaseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String logID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String caller; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String addr; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String client; // required
  public @org.apache.thrift.annotation.Nullable TrafficEnv trafficEnv; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extra; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOG_ID((short)1, "logID"),
    CALLER((short)2, "caller"),
    ADDR((short)3, "addr"),
    CLIENT((short)4, "client"),
    TRAFFIC_ENV((short)5, "trafficEnv"),
    EXTRA((short)6, "extra");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOG_ID
          return LOG_ID;
        case 2: // CALLER
          return CALLER;
        case 3: // ADDR
          return ADDR;
        case 4: // CLIENT
          return CLIENT;
        case 5: // TRAFFIC_ENV
          return TRAFFIC_ENV;
        case 6: // EXTRA
          return EXTRA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TRAFFIC_ENV,_Fields.EXTRA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOG_ID, new org.apache.thrift.meta_data.FieldMetaData("logID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLER, new org.apache.thrift.meta_data.FieldMetaData("caller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDR, new org.apache.thrift.meta_data.FieldMetaData("addr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT, new org.apache.thrift.meta_data.FieldMetaData("client", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAFFIC_ENV, new org.apache.thrift.meta_data.FieldMetaData("trafficEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TrafficEnv.class)));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Base.class, metaDataMap);
  }

  public Base() {
    this.logID = "";

    this.caller = "";

    this.addr = "";

    this.client = "";

  }

  public Base(
    java.lang.String logID,
    java.lang.String caller,
    java.lang.String addr,
    java.lang.String client)
  {
    this();
    this.logID = logID;
    this.caller = caller;
    this.addr = addr;
    this.client = client;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Base(Base other) {
    if (other.isSetLogID()) {
      this.logID = other.logID;
    }
    if (other.isSetCaller()) {
      this.caller = other.caller;
    }
    if (other.isSetAddr()) {
      this.addr = other.addr;
    }
    if (other.isSetClient()) {
      this.client = other.client;
    }
    if (other.isSetTrafficEnv()) {
      this.trafficEnv = new TrafficEnv(other.trafficEnv);
    }
    if (other.isSetExtra()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extra = new java.util.HashMap<java.lang.String,java.lang.String>(other.extra);
      this.extra = __this__extra;
    }
  }

  @Override
  public Base deepCopy() {
    return new Base(this);
  }

  @Override
  public void clear() {
    this.logID = "";

    this.caller = "";

    this.addr = "";

    this.client = "";

    this.trafficEnv = null;
    this.extra = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLogID() {
    return this.logID;
  }

  public Base setLogID(@org.apache.thrift.annotation.Nullable java.lang.String logID) {
    this.logID = logID;
    return this;
  }

  public void unsetLogID() {
    this.logID = null;
  }

  /** Returns true if field logID is set (has been assigned a value) and false otherwise */
  public boolean isSetLogID() {
    return this.logID != null;
  }

  public void setLogIDIsSet(boolean value) {
    if (!value) {
      this.logID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCaller() {
    return this.caller;
  }

  public Base setCaller(@org.apache.thrift.annotation.Nullable java.lang.String caller) {
    this.caller = caller;
    return this;
  }

  public void unsetCaller() {
    this.caller = null;
  }

  /** Returns true if field caller is set (has been assigned a value) and false otherwise */
  public boolean isSetCaller() {
    return this.caller != null;
  }

  public void setCallerIsSet(boolean value) {
    if (!value) {
      this.caller = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAddr() {
    return this.addr;
  }

  public Base setAddr(@org.apache.thrift.annotation.Nullable java.lang.String addr) {
    this.addr = addr;
    return this;
  }

  public void unsetAddr() {
    this.addr = null;
  }

  /** Returns true if field addr is set (has been assigned a value) and false otherwise */
  public boolean isSetAddr() {
    return this.addr != null;
  }

  public void setAddrIsSet(boolean value) {
    if (!value) {
      this.addr = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClient() {
    return this.client;
  }

  public Base setClient(@org.apache.thrift.annotation.Nullable java.lang.String client) {
    this.client = client;
    return this;
  }

  public void unsetClient() {
    this.client = null;
  }

  /** Returns true if field client is set (has been assigned a value) and false otherwise */
  public boolean isSetClient() {
    return this.client != null;
  }

  public void setClientIsSet(boolean value) {
    if (!value) {
      this.client = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TrafficEnv getTrafficEnv() {
    return this.trafficEnv;
  }

  public Base setTrafficEnv(@org.apache.thrift.annotation.Nullable TrafficEnv trafficEnv) {
    this.trafficEnv = trafficEnv;
    return this;
  }

  public void unsetTrafficEnv() {
    this.trafficEnv = null;
  }

  /** Returns true if field trafficEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetTrafficEnv() {
    return this.trafficEnv != null;
  }

  public void setTrafficEnvIsSet(boolean value) {
    if (!value) {
      this.trafficEnv = null;
    }
  }

  public int getExtraSize() {
    return (this.extra == null) ? 0 : this.extra.size();
  }

  public void putToExtra(java.lang.String key, java.lang.String val) {
    if (this.extra == null) {
      this.extra = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extra.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtra() {
    return this.extra;
  }

  public Base setExtra(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOG_ID:
      if (value == null) {
        unsetLogID();
      } else {
        setLogID((java.lang.String)value);
      }
      break;

    case CALLER:
      if (value == null) {
        unsetCaller();
      } else {
        setCaller((java.lang.String)value);
      }
      break;

    case ADDR:
      if (value == null) {
        unsetAddr();
      } else {
        setAddr((java.lang.String)value);
      }
      break;

    case CLIENT:
      if (value == null) {
        unsetClient();
      } else {
        setClient((java.lang.String)value);
      }
      break;

    case TRAFFIC_ENV:
      if (value == null) {
        unsetTrafficEnv();
      } else {
        setTrafficEnv((TrafficEnv)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOG_ID:
      return getLogID();

    case CALLER:
      return getCaller();

    case ADDR:
      return getAddr();

    case CLIENT:
      return getClient();

    case TRAFFIC_ENV:
      return getTrafficEnv();

    case EXTRA:
      return getExtra();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOG_ID:
      return isSetLogID();
    case CALLER:
      return isSetCaller();
    case ADDR:
      return isSetAddr();
    case CLIENT:
      return isSetClient();
    case TRAFFIC_ENV:
      return isSetTrafficEnv();
    case EXTRA:
      return isSetExtra();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Base)
      return this.equals((Base)that);
    return false;
  }

  public boolean equals(Base that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_logID = true && this.isSetLogID();
    boolean that_present_logID = true && that.isSetLogID();
    if (this_present_logID || that_present_logID) {
      if (!(this_present_logID && that_present_logID))
        return false;
      if (!this.logID.equals(that.logID))
        return false;
    }

    boolean this_present_caller = true && this.isSetCaller();
    boolean that_present_caller = true && that.isSetCaller();
    if (this_present_caller || that_present_caller) {
      if (!(this_present_caller && that_present_caller))
        return false;
      if (!this.caller.equals(that.caller))
        return false;
    }

    boolean this_present_addr = true && this.isSetAddr();
    boolean that_present_addr = true && that.isSetAddr();
    if (this_present_addr || that_present_addr) {
      if (!(this_present_addr && that_present_addr))
        return false;
      if (!this.addr.equals(that.addr))
        return false;
    }

    boolean this_present_client = true && this.isSetClient();
    boolean that_present_client = true && that.isSetClient();
    if (this_present_client || that_present_client) {
      if (!(this_present_client && that_present_client))
        return false;
      if (!this.client.equals(that.client))
        return false;
    }

    boolean this_present_trafficEnv = true && this.isSetTrafficEnv();
    boolean that_present_trafficEnv = true && that.isSetTrafficEnv();
    if (this_present_trafficEnv || that_present_trafficEnv) {
      if (!(this_present_trafficEnv && that_present_trafficEnv))
        return false;
      if (!this.trafficEnv.equals(that.trafficEnv))
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLogID()) ? 131071 : 524287);
    if (isSetLogID())
      hashCode = hashCode * 8191 + logID.hashCode();

    hashCode = hashCode * 8191 + ((isSetCaller()) ? 131071 : 524287);
    if (isSetCaller())
      hashCode = hashCode * 8191 + caller.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddr()) ? 131071 : 524287);
    if (isSetAddr())
      hashCode = hashCode * 8191 + addr.hashCode();

    hashCode = hashCode * 8191 + ((isSetClient()) ? 131071 : 524287);
    if (isSetClient())
      hashCode = hashCode * 8191 + client.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrafficEnv()) ? 131071 : 524287);
    if (isSetTrafficEnv())
      hashCode = hashCode * 8191 + trafficEnv.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
    if (isSetExtra())
      hashCode = hashCode * 8191 + extra.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Base other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLogID(), other.isSetLogID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logID, other.logID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCaller(), other.isSetCaller());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaller()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caller, other.caller);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAddr(), other.isSetAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addr, other.addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClient(), other.isSetClient());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client, other.client);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrafficEnv(), other.isSetTrafficEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrafficEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trafficEnv, other.trafficEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra(), other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Base(");
    boolean first = true;

    sb.append("logID:");
    if (this.logID == null) {
      sb.append("null");
    } else {
      sb.append(this.logID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("caller:");
    if (this.caller == null) {
      sb.append("null");
    } else {
      sb.append(this.caller);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addr:");
    if (this.addr == null) {
      sb.append("null");
    } else {
      sb.append(this.addr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("client:");
    if (this.client == null) {
      sb.append("null");
    } else {
      sb.append(this.client);
    }
    first = false;
    if (isSetTrafficEnv()) {
      if (!first) sb.append(", ");
      sb.append("trafficEnv:");
      if (this.trafficEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.trafficEnv);
      }
      first = false;
    }
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (trafficEnv != null) {
      trafficEnv.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public BaseStandardScheme getScheme() {
      return new BaseStandardScheme();
    }
  }

  private static class BaseStandardScheme extends org.apache.thrift.scheme.StandardScheme<Base> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Base struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logID = iprot.readString();
              struct.setLogIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CALLER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.caller = iprot.readString();
              struct.setCallerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addr = iprot.readString();
              struct.setAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.client = iprot.readString();
              struct.setClientIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRAFFIC_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.trafficEnv = new TrafficEnv();
              struct.trafficEnv.read(iprot);
              struct.setTrafficEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.extra = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.extra.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Base struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.logID != null) {
        oprot.writeFieldBegin(LOG_ID_FIELD_DESC);
        oprot.writeString(struct.logID);
        oprot.writeFieldEnd();
      }
      if (struct.caller != null) {
        oprot.writeFieldBegin(CALLER_FIELD_DESC);
        oprot.writeString(struct.caller);
        oprot.writeFieldEnd();
      }
      if (struct.addr != null) {
        oprot.writeFieldBegin(ADDR_FIELD_DESC);
        oprot.writeString(struct.addr);
        oprot.writeFieldEnd();
      }
      if (struct.client != null) {
        oprot.writeFieldBegin(CLIENT_FIELD_DESC);
        oprot.writeString(struct.client);
        oprot.writeFieldEnd();
      }
      if (struct.trafficEnv != null) {
        if (struct.isSetTrafficEnv()) {
          oprot.writeFieldBegin(TRAFFIC_ENV_FIELD_DESC);
          struct.trafficEnv.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extra.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.extra.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public BaseTupleScheme getScheme() {
      return new BaseTupleScheme();
    }
  }

  private static class BaseTupleScheme extends org.apache.thrift.scheme.TupleScheme<Base> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Base struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLogID()) {
        optionals.set(0);
      }
      if (struct.isSetCaller()) {
        optionals.set(1);
      }
      if (struct.isSetAddr()) {
        optionals.set(2);
      }
      if (struct.isSetClient()) {
        optionals.set(3);
      }
      if (struct.isSetTrafficEnv()) {
        optionals.set(4);
      }
      if (struct.isSetExtra()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLogID()) {
        oprot.writeString(struct.logID);
      }
      if (struct.isSetCaller()) {
        oprot.writeString(struct.caller);
      }
      if (struct.isSetAddr()) {
        oprot.writeString(struct.addr);
      }
      if (struct.isSetClient()) {
        oprot.writeString(struct.client);
      }
      if (struct.isSetTrafficEnv()) {
        struct.trafficEnv.write(oprot);
      }
      if (struct.isSetExtra()) {
        {
          oprot.writeI32(struct.extra.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.extra.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Base struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.logID = iprot.readString();
        struct.setLogIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.caller = iprot.readString();
        struct.setCallerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.addr = iprot.readString();
        struct.setAddrIsSet(true);
      }
      if (incoming.get(3)) {
        struct.client = iprot.readString();
        struct.setClientIsSet(true);
      }
      if (incoming.get(4)) {
        struct.trafficEnv = new TrafficEnv();
        struct.trafficEnv.read(iprot);
        struct.setTrafficEnvIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.extra = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key7;
          @org.apache.thrift.annotation.Nullable java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.extra.put(_key7, _val8);
          }
        }
        struct.setExtraIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

